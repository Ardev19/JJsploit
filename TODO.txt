

## WIP TODO IGNORE
DONE-need to better track starting frame in InputQueue
  -Sync_LazyAddPlayer will init an inputQueue with no inputs, at that point we are already predicting to frame n (say) but there won't be any inputs in the queue
-since you added potato/severity stuff, you probably need custom serialize/deserialize for gameinput 
  -just do gameinput_serializable without the potato
-call GGPO_Peer_DoPoll inside GGPO_Peer_AdvanceFrame
  -- TODO maybe poll here?
-add polling timer to udpproto include calling UDPProto_OnLoopPoll
  IGNORE-also need to call peer::DoPoll every now and then (NO, this is done by the API user, but you still need to call it after ADvanceFrame)
-add logging helpers to easily log tables and stuff etc
-write tests lol
-cleanup routine for savedstate in synced
-add override and consistency assert in InputQueue_AddInput
  -need to dinstguish between local input and remote input and local player remote input
  -prob OK to assert that remote input is never double added?
  -do i need to track last added remote/local input?
  -ideally the same mechanism can be used to assert/override inputs that arrive out of order or from non auth peers 
  -Pretty sure you need to let sync know somehow that inputs were overridden


-udpproto to support spectator mode
  -reject/assert/log on input
  -player number is spectator
-add disconnect tracking
-figure out what to do when player is disconnect
  -refer to orig ggpo implementation
-allow dynamic player entry/exit 
  -probbaly have a server input for such events
    -startgame + player data (frame 0 input)
    -maybe have an all players synced msg (when all players have reasonable rift) (probbaly not needed)
    -player disconnected (input for a player after they disconnected is invalid, should never happen)
    -player reconnected
    -player joined
    -game end (probbaly not needed)
V2-consider adding sync routine to udpproto
V2-allow self to be flagged as authoritative inside sync/inputqueue
  -otherwise, allow peer to override self inputs
  -if peer does not send self inputs (but send other stuff for that frame) assume that local inputs are correct/authorized
    -NO this won't work, because peer sends player inputs from many different frames 
    -instead, just have server send back player inputs to confirm them OR send a separate confirmation packet
  -why do I want server to override player inputs again?? IDK
V2-figure out how to handle initial player data
  -prob best just to recommend X frames for syncing initial state and rift
  -send player data as server input on frame 0

DONE-you need to set inputQueue.first_incorrect_frame
  DONE-need to pass in gameinput equal function
  DONE-you also need to reset first_incorrect_frame (resetPrediction)
DONE-change Sync_AddInputXYZ to make a copy of input and set the frame in there rather than use inout_input, it can return an output frame
DONE-- TODO call this inside of the AdvanceFrame function above to be more consistent with GGPO API usage 

DONE-summary of weird shit
  DONE-sometimes input frames get niled by the time they arrive over the fake network, I thin this is due to references everywhere. You need to deep copy before sending over the fake network.
  DONE/FAIL/LOL-ASDF why does endpointstuff subscribe get mixed up???
DONE-utility methods
  DONE-better logging function, maybe extract callsite from debug.callstack or whatever
  DONE-proper table counting method to replace #
  DONE-proper table empty method to replace #/next
DONE-MockUDPEndpointManager_AddUDPEndpoint is incorrect
  -it needs to make a pair of endpoints with matched send/subscribes
DONE-add player to subscribe callback
DONE-meed to call Sync_AddRemoteInput somewhere
  -GGPO_Peer_PollUdpProtocolEvents is wrong
DONE-allow OPTIONAL input sending in udproto
  -you still need to set lastAddedLocalFrame because SendPeerInput won't get called in the not sending case
    -INSTEAD just require calling SendPeerInput with nil input
    -AND you can optimize by not sending the input if its nil